name: main
on:
  push:
    paths-ignore:
      - 'assets/**'
  # workflow_dispatch: 

jobs:
  # -----------------------------------------------------------------------------------------------
  # Pre step
  # -----------------------------------------------------------------------------------------------
  evaluate:
    name: Evaluate
    runs-on: ubuntu-latest
    outputs:
      ms01_build_flag: ${{ steps.check-changes-in-ms01.outputs.any_modified }}
      ms02_build_flag: ${{ steps.check-changes-in-ms02.outputs.any_modified }}
      version: ${{ steps.version.outputs.VERSION }}
      # version_build: ${{ steps.version.outputs.VERSION_BUILD }}

    steps:
      - name: Checkout Project
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0

      - name: Get specific changed files
        id: check-changes-in-ms01
        uses: tj-actions/changed-files@v18.3
        with:
          files: |
            firmware/raspberry-pi-zero-w/ms-01-azure-gateway
      
      - name: Get specific changed files
        id: check-changes-in-ms02
        uses: tj-actions/changed-files@v18.3
        with:
          files: |
            firmware/raspberry-pi-zero-w/ms-02-data-collector
      
      - name: Version
        id: version
        run: | 
          git fetch --prune --unshallow
          # The version (for Rust microservices) will always be the git tag, since Rust is only excepting semantic versioning
          echo '::set-output name=VERSION::$( if [ "${{ env.GITHUB_REF_NAME }}" == "release" ]; then git describe; else git describe --tags | awk -F - '{print $1"-prerelease."$2}' ); fi )'
          # For the debian packages and the compiled Rust firmware file name we will use the additional prebuild versioning. 
          # echo '::set-output name=VERSION_BUILD::$( git describe --tags | awk -F - '{print $1"-prerelease."$2}' )'


  # -----------------------------------------------------------------------------------------------
  # Builds
  # -----------------------------------------------------------------------------------------------

  build_ms01:
    name: build azure gateway service 
    needs: evaluate
    runs-on: ubuntu-20.04
    # if: needs.evaluate.outputs.ms01_build_flag == 'true'
    container:
      image: fabianbruenger/greeniot4all:16.04
      credentials:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    steps:
    - name: Checkout Project
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0
    
    - name: Rust fix 
      run: |
        rustup default stable
        rustup target add arm-unknown-linux-gnueabi
        echo ${{ needs.evaluate.outputs.version }}

    # All version in release are semantic
    - name: Build Release
      # if: ${{ env.GITHUB_REF_NAME == release }}
      run: | 
        sed -i -e "s/VERSION_NUMBER/${{ needs.evaluate.outputs.version }}/g" firmware/raspberry-pi-zero-w/ms-01-azure-gateway/Cargo.toml
        cd firmware/raspberry-pi-zero-w/ms-01-azure-gateway
        cargo build --release --target arm-unknown-linux-gnueabi
        cargo deb --target arm-unknown-linux-gnueabi --output /opt/build/
        mv firmware/raspberry-pi-zero-w/ms-01-azure-gateway/target/arm-unknown-linux-gnueabi/release/ms-01-azure-gateway /opt/build/ms-01-azure-gateway-${{ needs.evaluate.outputs.version }}

    - name: Deploy 
      run: curl -u${{ secrets.JFROG_USER }}:${{ secrets.JFROG_PASSWORD }} -XPUT "https://greeniot4all.jfrog.io/artifactory/greeniot4all-debian/pool/ms-01-azure-gateway;deb.distribution=trusty;deb.component=private;deb.architecture=armel" -T /opt/build/ms-01-*.deb

    - name: Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ms01-build-deb
        path: |
          /opt/build

  # build_ms02:
  #   name: build data collector service
  #   needs: evaluate
  #   runs-on: ubuntu-20.04
  #   if: needs.evaluate.outputs.ms02_build_flag == 'true'
  #   container:
  #     image: fabianbruenger/greeniot4all:16.04
  #     credentials:
  #       username: ${{ secrets.DOCKER_USER }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   steps:
  #   - name: Checkout Project
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       fetch-depth: 0

  #   - name: Build 
  #     run: | 
  #       rustup default stable
  #       rustup target add arm-unknown-linux-gnueabi
  #       cd firmware/raspberry-pi-zero-w/ms-02-data-collector
  #       cargo build --release --target arm-unknown-linux-gnueabi
  #       cargo deb --target arm-unknown-linux-gnueabi --output /opt/build/ms-02-data-collector.deb
    
  #   - name: Deploy 
  #     run: curl -u${{ secrets.JFROG_USER }}:${{ secrets.JFROG_PASSWORD }} -XPUT "https://greeniot4all.jfrog.io/artifactory/greeniot4all-debian/pool/ms-02-data-collector;deb.distribution=trusty;deb.component=private;deb.architecture=armel" -T /opt/build/ms-02-data-collector.deb
  #   - name: Artifacts
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ms02-build-deb
  #       path: |
  #         /opt/build/ms-02-data-collector.deb
  #         firmware/raspberry-pi-zero-w/ms-02-data-collector/target/arm-unknown-linux-gnueabi/release/ms-02-data-collector